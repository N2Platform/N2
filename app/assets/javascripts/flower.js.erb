var petals = new Image();
petals.src = "<%= asset_path('flower1-02.png') %>";
var px=26.3, py=10, pw=53, ph=31;

var core = new Image();
core.src = "<%= asset_path('flower1-03.png') %>";
var cx=40.0952380952, cy=19.1666666667, cw=25, ch=14.1666666667;

var trunk = new Image();
trunk.src = "<%= asset_path('flower1-04.png') %>";
var tx=47.2380952381, ty=34.7222222222, tw=7.8571428571, th=40;

var soil = new Image();
soil.src = "<%= asset_path('flower1-05.png') %>";
var sx=0, sy=74.4444444444, sw=100, sh=25.5555555556;

var left_leaf = new Image();
left_leaf.src = "<%= asset_path('flower1-06.png') %>";
var lx=25, ly=38.3333333333, lw=23.8095238095, lh=12.5;


var right_leaf = new Image();
right_leaf.src = "<%= asset_path('flower1-08.png') %>";
var rx=51, ry=42, rw=24.0476190476, rh=16.6666666667;

// Sustainer variables. Use these when deciding how to draw the flower!
var ghg, sustainability, social, hcv, traceability;

images = [loadImage(petals), loadImage(core), loadImage(trunk),
    loadImage(soil), loadImage(left_leaf), loadImage(right_leaf)];

var canvas;

// Because of rails magic, window.onload doesn't trigger when clicking links.
$(document).on('turbolinks:load', page_loaded);

// Returns a promise that resolves into the requested image.
function loadImage(img) {
    return new Promise(function(resolve, reject) {
        img.onload = resolve(img);
    });

}

function draw_flower() {
    //Once all the images have been loaded
    Promise.all(images).then(function() {
        //Alter images as desired, for example
        //petals = alter_image(petals, grayscale);
        //trunk = alter_image(trunk, setAlphaTo, 50);

        //Draw the images at the specified positions.
        scalable_draw(core, cx, cy, cw, ch);
        scalable_draw(trunk, tx, ty, tw, th);
        scalable_draw(soil, sx, sy, sw, sh);
        scalable_draw(petals, px, py, pw, ph);
        scalable_draw(left_leaf, lx, ly, lw, lh);
        scalable_draw(right_leaf, rx, ry, rw, rh);
    });
}

// Draw the flower if the page has a canvas for it.
function page_loaded() {
    canvas = document.getElementById('flower');
    if (canvas) {
        ghg = parseInt(document.getElementById('ghg').innerHTML);
        sustainability = parseInt(document.getElementById('sustainability').innerHTML);
        social = parseInt(document.getElementById('social').innerHTML);
        hcv = parseInt(document.getElementById('hcv').innerHTML);
        traceability = parseInt(document.getElementById('traceability').innerHTML);

        draw_flower();
    }
}

// Parameters in percentages to support scaling of the image.
function scalable_draw(image, x, y, width, height) {
    var ctx = canvas.getContext('2d');
    // Convert percentages to pixels
    x = x*canvas.width/100;
    y = y*canvas.height/100;
    width = width*canvas.width/100;
    height = height*canvas.height/100;

    //Draw the image
    ctx.drawImage(image, x, y, width, height);

}

//Takes an image as an argument and returns a canvas. Both can be used for drawing,so it makes no real difference.
function alter_image(image, pixel_manipulation, args){
    var altered_canvas = document.createElement('canvas');
    altered_canvas.width = image.width;
    altered_canvas.height = image.height;
    var ctx = altered_canvas.getContext('2d');
    ctx.drawImage(image, 0, 0);
    image.style.display = 'none';
    var imageData = ctx.getImageData(0, 0, altered_canvas.width, altered_canvas.height);
    var data = imageData.data;

    pixel_manipulation(data, args);

    ctx.putImageData(imageData, 0, 0);
    return altered_canvas;
}

function grayscale(data){
    for (var i = 0; i < data.length; i += 4) {
        var avg = (data[i] + data[i+1] + data[i+2]) / 3;
        data[i] = avg;
        data[i+1] = avg;
        data[i+2] = avg;
    }
    return data;
}

function setAlphaTo(data, alpha){
    for (var i = 0; i < data.length; i += 4) {
        // If not already completely see through
        if (data[i+3] > 0) {
            data[i+3] = alpha;
        }
    }
    return data;
}