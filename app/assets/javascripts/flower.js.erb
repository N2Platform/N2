var petals = new Image();
petals.src = "<%= asset_path('flower1-02.png') %>";

var core = new Image();
core.src = "<%= asset_path('flower1-03.png') %>";

var trunk = new Image();
trunk.src = "<%= asset_path('flower1-04.png') %>";

var soil = new Image();
soil.src = "<%= asset_path('flower1-05.png') %>";

var left_leaf = new Image();
left_leaf.src = "<%= asset_path('flower1-06.png') %>";


var right_leaf = new Image();
right_leaf.src = "<%= asset_path('flower1-08.png') %>";

var coords = {
    petals: { x: 26.3, y: 10, w: 53, h:31 },
    core: { x: 40.0952380952, y: 19.1666666667, w: 25, h: 14.1666666667 },
    trunk: { x: 47.2380952381, y: 34.7222222222, w: 7.8571428571, h: 40 },
    soil: { x: 0, y: 74.4444444444, w: 100, h: 25.5555555556 },
    left_leaf: { x: 25, y: 38.3333333333, w: 23.8095238095, h: 12.5 },
    right_leaf: { x: 51, y: 42, w: 24.0476190476, h: 16.6666666667}
};

var drawables = {};

// Sustainer variables. Use these when deciding how to draw the flower!
var ghg, sustainability, social, hcv, traceability;

images = [loadImage(petals), loadImage(core), loadImage(trunk),
    loadImage(soil), loadImage(left_leaf), loadImage(right_leaf)];

// Global variables for convenience.
var canvas, ctx;

// Because of rails magic, window.onload doesn't trigger when clicking links.
$(document).on('turbolinks:load', refresh);

// Returns a promise that resolves into the requested image.
function loadImage(img) {
    var deferred = $.Deferred();
    img.onload = function() {
        deferred.resolve();
    };
    return deferred.promise();
}

function draw_flower() {
    //Once all the images have been loaded
    $.when.apply($, images).done(function() {
        if(Object.keys(drawables).length === 0){
            drawables["core"] = {image:core, coord:coords.core};
            drawables["trunk"] = {image:trunk, coord:coords.trunk};
            drawables["soil"] = {image:soil, coord:coords.soil};
            drawables["petals"] = {image:petals, coord:coords.petals};
            drawables["left_leaf"] = {image:left_leaf, coord:coords.left_leaf};
            drawables["right_leaf"] = {image:right_leaf, coord:coords.right_leaf};
            drawables["petals_gray"] = {image:alter_image(petals,grayscale), coord:coords.petals, alpha: 1-ghg/10}
            if (social > 5){
                drawables["left_leaf"].alpha = 1;
            } else {
                drawables["left_leaf"].alpha = 0;
            }
            if (social > 8){
                drawables["right_leaf"].alpha = 1;
            } else {
                drawables["right_leaf"].alpha = 0;
            }
        } else {
            if (social > 5){
                fadeIn("left_leaf", drawables["left_leaf"].alpha);
            } else {
                fadeOut("left_leaf", drawables["left_leaf"].alpha);
            }
            if (social > 8){
                fadeIn("right_leaf", drawables["right_leaf"].alpha);
            } else {
                fadeOut("right_leaf", drawables["right_leaf"].alpha);
            }
        }
        fadeTowards("petals_gray", drawables["petals_gray"].alpha, 1-ghg/10)
        //Draw the images at the specified positions.
        draw_all();
    });
}

function draw_all() {
    drawables["petals_gray"].alpha;
    ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    for(drw in drawables) {
        scalable_draw(drw, drawables[drw].coord, drawables[drw].alpha);
    }
}

// Update values and draw the flower if the page has a canvas for it.
function refresh() {
    canvas = document.getElementById('flower');
    if (canvas) {
        ghg = parseInt(document.getElementById('ghg').value);
        sustainability = parseInt(document.getElementById('sustainability').value);
        social = parseInt(document.getElementById('social').value);
        hcv = parseInt(document.getElementById('hcv').value);
        traceability = parseInt(document.getElementById('traceability').value);

        draw_flower();
    }
}

// Parameters in percentages to support scaling of the image.
function scalable_draw(drawable) {
    if(drawables[drawable].alpha === undefined) {
        drawables[drawable].alpha = 1;
    }
    var x = drawables[drawable].coord.x;
    var y = drawables[drawable].coord.y;
    var width = drawables[drawable].coord.w;
    var height = drawables[drawable].coord.h;
    // Convert percentages to pixels
    x = x*canvas.width/100;
    y = y*canvas.height/100;
    width = width*canvas.width/100;
    height = height*canvas.height/100;

    //Set the opacity
    ctx.globalAlpha = drawables[drawable].alpha;

    //Draw the image
    ctx.drawImage(drawables[drawable].image, x, y, width, height);
}

//Takes an image as an argument and returns a canvas. Both can be used for drawing,so it makes no real difference.
function alter_image(image, pixel_manipulation, args){
    var altered_canvas = document.createElement('canvas');
    altered_canvas.width = image.width;
    altered_canvas.height = image.height;
    var alt_ctx = altered_canvas.getContext('2d');
    alt_ctx.drawImage(image, 0, 0);
    image.style.display = 'none';
    var imageData = alt_ctx.getImageData(0, 0, altered_canvas.width, altered_canvas.height);
    var data = imageData.data;

    pixel_manipulation(data, args);

    alt_ctx.putImageData(imageData, 0, 0);
    return altered_canvas;
}

function grayscale(data){
    for (var i = 0; i < data.length; i += 4) {
        var avg = (data[i] + data[i+1] + data[i+2]) / 3;
        data[i] = avg;
        data[i+1] = avg;
        data[i+2] = avg;
    }
    return data;
}

function fadeIn(img, alpha, target) {
    if (alpha === undefined) {
        alpha = 0;
    }
    if (target === undefined) {
        target = 1
    }
    drawables[img].alpha = alpha;
    alpha += 0.01;
    draw_all();
    if (alpha < target) {
        requestAnimationFrame(function() {
            fadeIn(img, alpha, target);
        });
    }
}

function fadeOut(img, alpha, target) {
    if (alpha === undefined) {
        alpha = 1;
    }
    if (target === undefined) {
        target = 0
    }
    drawables[img].alpha = alpha;
    alpha -= 0.01;
    draw_all();
    if (alpha > target) {
        requestAnimationFrame(function() {
            fadeOut(img, alpha, target);
        });
    }
}

function fadeTowards(img, alpha, target) {
    if (alpha > target) {
        fadeOut(img, alpha, target);
    } else {
        fadeIn(img, alpha, target);
    }
}
